// //webppl sorites.wppl --require-js ./simpleCSV.js

var alternatives = "adjnull";

var items = ["coffee maker", "headphones", "laptop", "sweater", "watch"];

var get_parameters = function(item) {
	var prior_csv_data = simpleCSV.readCSV("mean_priors.csv").data;
	var item_data = filter(
		function(trio) {
			return item == trio[0];
		}, prior_csv_data.slice(1, prior_csv_data.length - 1)
	);
	var values = map(function(trio) {return trio[1];}, item_data);
	var probabilities = map(function(trio) {return trio[2];}, item_data);
	return {
		"values": map( function(prob) {return global.parseFloat(prob);} , values),
		"probabilities": map( function(prob) {return global.parseFloat(prob);} , probabilities)
	};	
}

var get_prior = cache(function(item) {
	var parameters = get_parameters(item);
	var values = parameters.values;
	var probabilities = parameters.probabilities;
	return function() {
		return values[discrete(probabilities)];
	}
})

var get_theta_prior = cache(function(item) {
	var values = get_parameters(item).values;
	//var width = values[1] - values[0];
	//var more_values = map(function(x) {return x + (width / 2);}, values);
	//var all_values = values.concat(more_values);
	return function() {
		return uniformDraw(values);
	};
})

var is_true = cache(function(utterance, value, theta) {
	if (utterance == "adj") {
		return value >= theta;
	} else if (utterance == "null") {
		return true;
	} else {
		console.log("err 55");
	}
})

var literal_listener = cache(function(utterance, theta, item) {
	return Enumerate(
		function() {
			var prior = get_prior(item);
			var value = prior();
			factor(is_true(utterance, value, theta) ? 0 : -Infinity)
			return value;
		}
	)
})

var utterance_prior = cache(function(cost) {
	return Enumerate(function() {
		var utterances = ["adj", "null"];
		var costs = [cost, 0];
		var probabilities = map(function(c) {return Math.exp(- c);}, costs);
		return utterances[discrete(probabilities)];
	});
})

var speaker = cache(function(value, theta, item, cost, lambda) {
	return Enumerate(
		function() {
			var utterance = sample(utterance_prior(cost));
			var literal_interpretation = literal_listener(utterance, theta, item);
			var score = literal_interpretation.score([], value);
			factor(score * lambda);
			return utterance;
		}
	)
})

var listener = function(utterance, item, cost, lambda) {
	return Enumerate(
		function() {
			var prior = get_prior(item);
			var theta_prior = get_theta_prior(item);
			var value = prior();
			var theta = theta_prior();
			var score = speaker(value, theta, item, cost, lambda).score([], utterance);
			factor(score);
			return [value, theta];
		}
	)
}

var costs = [1, 2, 3, 4, 5, 6];
var lambdas = [1, 2, 3, 4, 5, 6];

map(function(cost) {
	map(function(lambda) {
		map(function(item) {
			console.log("running " + item + ": " + alternatives + "_cost" + cost + "_lambda" + lambda);
			var listenerERP = listener("adj", item, cost, lambda);
			console.log("finished running " + item + ": " + alternatives + "_cost" + cost + "_lambda" + lambda);
			var model_output = {
				"data" : map(function(pair) {
					var value = pair[0];
					var theta = pair[1];
					var score = listenerERP.score([], pair);
					var probability = Math.exp(score);
					return [item, cost, lambda, value, theta, score, probability];
				}, listenerERP.support())
			}
			simpleCSV.writeCSV(model_output, "model_output/" + item + "_" + alternatives + "_cost" + cost + "_lambda" + lambda + ".csv");
			return 1;
		}, items);
		return 1;
	}, lambdas);
	return 1;
}, costs)


// priors.slice(1, priors.length);

// read in priors

// literal listener

// speaker

// listener

// enumerate parameters

// write output