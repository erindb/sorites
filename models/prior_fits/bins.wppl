/*
Log-normal fit for binned histogram elicitation

ARGS.items list
ARGS.data data frame
*/

var foreach = function(lst, fn) {
    var foreach_ = function(i) {
        if (i < lst.length) {
            fn(lst[i]);
            foreach_(i + 1);
        }
    };
    foreach_(0);
};

var logit = function(prob) {
	var rating_avoidEnds = prob == 0 ? 0.01 : prob == 1 ? 0.99 : prob
	var logitRating = Math.log(rating_avoidEnds/ (1-rating_avoidEnds))
	return logitRating;
};

var model = function() {
	var sig_binned_hist = uniform(0, 10);
	foreach(ARGS.items, function() {
		query.add({a: 1})
	});
	return query;
};

// var model = function() {

// 	foreach(ARGS.items, function(item) {
// 		// sample possible parameters
// 		var params = {
// 			mu: uniform(0, 20),
// 			sig: uniform(0, 5)
// 		};
// 		var data = _.filter(ARGS.data, {item: item});

// 		// factor by likelihood of responses
// 		mapData({data: data}, function(datum) {
// 			var lower_bound = datum.LB;
// 			var upper_bound = datum.UB;
// 			var rating = datum.rating;
// 			// assume log of price is normally distributed
// 			// and calculate CDF within those bounds
// 			var gaussian_params = {
// 				mu: params.mu,
// 				sigma: params.sig
// 			};
// 			var latent_prob_of_bin = (
// 				utils.lognormalCDF(upper_bound, gaussian_params) -
// 	        	utils.lognormalCDF(lower_bound, gaussian_params)
// 	        );
// 			// factor by likelihood of rating if Gaussian centered at that prob
// 			var prob_of_sampled_price = Gaussian({
// 				mu: logit(latent_prob_of_bin),
// 				sigma: params.sig_binned_hist

// 			}).score(logit(rating));
// 			factor(prob_of_sampled_price);
// 		});
// 	});

// 	return 1;
// };

"finished";