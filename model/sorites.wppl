// to run:
// export NODE_PATH=/usr/local/lib/node_modules
// node --max-old-space-size=8192 ~/cocolab/webppl/webppl sorites.wppl --require-js ./simpleCSV.js 
// cat *.csv all_model_output.csv

var csv_data = utils.readCSV('prior_means.csv').data;
var header = csv_data[0];
var data = csv_data.slice(1, csv_data.length - 1);

var get_item = function(line) {
  return line[0];
}
var get_lowers = function(line) {
  var lower = utils.float(line[1]);
  return lower;
}
var get_probability = function(line) {
  var prob = utils.float(line[2]);
  return prob;
}
var get_prior_version = function(line) {
  return line[3];
}

var get_prior_data = cache(function(object, prior_version) {
  var prior_data = filter(function(line) {
    return get_prior_version(line) == prior_version & get_item(line) == object;
  }, data);
  var values = map(get_lowers, prior_data);
  var probabilities = map(get_probability, prior_data);
  return {
    values: values,
    probabilities: probabilities
  }
})

var get_price_prior = function(object, prior_version) {
  return function () {
    var prior_data = get_prior_data(object, prior_version);
    return prior_data.values[discrete(prior_data.probabilities)];
  }
}

// head of csv file:
// { data: 
//    [ [ 'item', 'lowers', 'probability', 'prior_version' ],
//      [ 'sweater', '0', '0.00198956401670392', 'v4_actual' ],
//      [ 'sweater', '3', '0.00447944726095418', 'v4_actual' ],
//      [ 'sweater', '6', '0.00452885388594682', 'v4_actual' ],

var get_theta_prior = function(object, prior_version) {
  return function() {
    var prior_data = get_prior_data(object, prior_version);
    return uniformDraw(prior_data.values);
  }
}

var model = function(object, prior_version, alpha, utterance_cost) {
  var price_prior = get_price_prior(object, prior_version);
  var theta_prior = get_theta_prior(object, prior_version);

  var utterancePrior = function() {
    var utterances = [ "nothing", "expensive"];
    var costs = [0, utterance_cost];
    var probabilities = map(function(cost) {Math.exp(- cost);}, costs);
    return utterances[discrete(probabilities)];
  }

  var meaning = function(utt,world) {
    return utt=="expensive"? world.price>world.theta :
           true
  }

  var literalListener = cache(function(utterance, inherited_theta) {
    Enumerate(function(){
      var world = {
        price: price_prior(),
        theta: inherited_theta
      }

      var m = meaning(utterance, world)
      factor(m?0:-Infinity)
      return world
    })
  })

  var speaker = cache(function(world) {
    Enumerate(function(){
      var utterance = utterancePrior()
      var L = literalListener(utterance, world.theta)
      factor(L.score([],world) * alpha)
      return utterance
    })
  })

  var listener = function(utterance) {
    Enumerate(function(){
      var world = {
        price: price_prior(),
        theta: theta_prior()
      }
      var S = speaker(world)
      factor(S.score([],utterance))
      return world
    })
  }

  var getHist = function(dist) {
    var probs = map(function(label) {return Math.exp(dist.score([], label))}, dist.support([]));
    var pairList = zip(dist.support([]), probs);
    return pairList;
  }

  var getList = function(dist) {
   map(function(bin) {
     var price = bin[0].price;
     var theta = bin[0].theta;
     var probability = bin[1];
     return [
       prior_version, object, price, theta,
       probability, utterance_cost, alpha
     ];
   }, dist)
  }

  return [[
    "prior_version", "object", "price", "theta",
    "probability", "utterance_cost", "alpha"
  ]].concat(
    getList(getHist(listener("expensive")))
  );
}

var objects = ["laptop", "watch", "coffee maker", "sweater", "headphones"];
var versions = [
  "exp1"
];
var alphas = [1, 5];
var utterance_costs = [1, 6];

map(function(prior_version) {
  map(function(object) {
    map(function(alpha) {
      map(function(utterance_cost) {
        var filename = "model_output/model_object" + object + "_version" + prior_version + "_alpha" + alpha + "_cost" + utterance_cost + ".csv";
        utils.writeCSV(model(object, prior_version, alpha, utterance_cost), filename);
      }, utterance_costs);
    }, alphas);
  }, objects);
}, versions);

"success!!"