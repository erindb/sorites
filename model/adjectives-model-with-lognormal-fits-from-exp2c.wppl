// note to self: comments are good!

// utilities
var print = function(x) {
  console.log(x);
};
var printERP = function(erp) {
  var support = erp.support();
  var probs = map(function(x) {return Math.exp(erp.score([], x));}, support);
  map2(function(s, p) {
    print(JSON.stringify(s) + ': ' + p);
  }, support, probs);
  return true;
};
var DEBUG = false;
var debug = function(str) {
  if (DEBUG) {
    print(str);
  }
};

//model

var n_particles = 10000;

var alternatives = "adjnull";

var items = [
	//"building",
	//"mountain",
	//"tree",
	//"coffee maker",
	//"laptop",
	//"watch",
	"college student",
	"new parent",
	"New Yorker"
];

var parameters = {
	"college student": {
		"mu": 2.95,
		"sigma": 0.394,
		"max": 85,
		"step": 5
	},
	"new parent": {
		"mu": 3.2,
		"sigma": 0.385,
		"max": 85,
		"step": 5
	},
	"New Yorker": {
		"mu": 3.28,
		"sigma": 0.830,
		"max": 85,
		"step": 5
	},
	"tree": {
		"mu": 2.53,
		"sigma": 1.146,
		"max": 95,
		"step": 5
	},
	"building": {
		"mu": 3.49,
		"sigma": 1.612,
		"max": 190,
		"step": 10
	},
	"mountain": {
		"mu": 7.99,
		"sigma": 1.479,
		"max": 19000,
		"step": 1000
	},
	"coffee maker": {
		"mu": 3.51,
		"sigma": 0.871,
		"max": 268,
		"step": 4
	},
	"watch": {
		"mu": -11.19,
		"sigma": 5.184,
		"max": 2950,
		"step": 50
	},
	"laptop": {
		"mu": 6.25,
		"sigma": 0.752,
		"max": 2450,
		"step": 50
	}
}

var get_prior = cache(function(item) {
	var mu = parameters[item]["mu"];
	var sigma = parameters[item]["sigma"];
	return function() {
		var x = gaussian(mu, sigma);
		return(Math.exp(x));
	}
})

var get_theta_prior = cache(function(item) {
	var max = parameters[item]["max"];
	var step = parameters[item]["step"] / 2;
	return function() {
		return randomInteger(Math.round(max/step)) * step;
	};
})

var is_true = cache(function(utterance, value, theta) {
	if (utterance == "adj") {
		return value >= theta;
	} else if (utterance == "null") {
		return true;
	} else {
		console.log("err 55");
	}
})

var literalERP = cache(function(utterance, theta, item) {
	return ParticleFilter(
		function() {
			var prior = get_prior(item);
			var value = prior();
			factor(is_true(utterance, value, theta) ? 0 : -Infinity)
			return value;
		}, n_particles
	)
})

var utterance_prior = cache(function(cost) {
	return Enumerate(
		function() {
			var utterances = ["adj", "null"];
			var costs = [cost, 0];
			var probabilities = map(function(c) {return Math.exp(- c);}, costs);
			return utterances[discrete(probabilities)];
		}
	);
})

var eps = 0.0001;

//interpolate to get score
var get_score = function(discreteERP, value) {
	debug('value = ' + value);
	var support = discreteERP.support();
	var lowerValue = Math.max.apply(null, filter(function(x) {
		return x <= value;
	}, support));
	debug('lowerValue = ' + lowerValue);
	var upperValue = Math.min.apply(null, filter(function(x) {
		return x >= value;
	}, support));
	debug('upperValue = ' + upperValue);
	var lowerProb = discreteERP.score([], lowerValue);
	var upperProb = discreteERP.score([], upperValue);
	return (lowerValue == -Infinity ? upperProb :
		((lowerProb + upperProb) / 2));
}

var speakerERP = cache(function(value, theta, item, cost, lambda) {
	return Enumerate(
		function() {
			var utterance = sample(utterance_prior(cost));
			debug(utterance);
			var literal_interpretation = literalERP(utterance, theta, item);
			var score = get_score(literal_interpretation, value);
			debug(score);
			factor(score * lambda);
			return utterance;
		}
	)
});

var costs = [1, 3, 6, 9];
var lambdas = [1, 3, 6, 9];

var listenerERP = function(utterance, item, cost, lambda) {
	return ParticleFilter(
		function() {
			var prior = get_prior(item);
			var theta_prior = get_theta_prior(item);
			var value = prior();
			debug('value=' + value);
			var theta = theta_prior();
			debug('theta=' + value);
			var choice_of_utt = speakerERP(value, theta, item, cost, lambda);
			//printERP(choice_of_utt);
			var score = choice_of_utt.score([], utterance);
			factor(score);
			return [value, theta];
		}, n_particles
	)
}

// map(function(cost) {
// 	map(function(lambda) {
// 		map(function(item) {
// 			console.log("running " + item + ": " + alternatives + "_cost" + cost + "_lambda" + lambda);
// 			var listenerERP = listener("adj", item, cost, lambda);
// 			console.log("finished running " + item + ": " + alternatives + "_cost" + cost + "_lambda" + lambda);
// 			var model_output = {
// 				"data" : map(function(pair) {
// 					var value = pair[0];
// 					var theta = pair[1];
// 					var score = listenerERP.score([], pair);
// 					var probability = Math.exp(score);
// 					return [item, cost, lambda, value, theta, score, probability];
// 				}, listenerERP.support())
// 			}
// 			simpleCSV.writeCSV(model_output, "model_output/" + item + "_" + alternatives + "_cost" + cost + "_lambda" + lambda + ".csv");
// 			return 1;
// 		}, items);
// 		return 1;
// 	}, lambdas);
// 	return 1;
// }, costs)

map(function(cost) {
	map(function(item) {
		var cost = 1;
		var lambda = 1;
		console.log("running " + item + ": " + alternatives + "_cost" + cost + "_lambda" + lambda);
		var result = listenerERP('adj', item, 1, 1);
		console.log("finished running " + item + ": " + alternatives + "_cost" + cost + "_lambda" + lambda);
		var model_output = {
			"data" : map(function(pair) {
				var value = pair[0];
				var theta = pair[1];
				var score = result.score([], pair);
				var probability = Math.exp(score);
				return [item, cost, lambda, value, theta, score, probability];
			}, result.support())
		}
		simpleCSV.writeCSV(model_output, "adjectives-model-with-lognormal-fits-from-exp2c/" +
			item + "_" + alternatives + "_cost" + cost + "_lambda" + lambda + "_nparticles" + n_particles + ".csv");
		return 1;
	}, items);
	return 1;
}, costs);

"finished"