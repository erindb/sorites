// webppl sorites_parametric_prior.wppl --require-js ./simpleCSV.js

var n_particles = 1000;

var alternatives = "adjnull";

var items = ["coffee maker", "headphones", "laptop", "sweater", "watch"];

var parameters = {
	"coffee maker": {
		"mu": 3.724728,
		"sigma": 0.9393049,
		"max": 268,
		"step": 2.00
	},
	"headphones": {
		"mu": 3.655833,
		"sigma": 1.1002568,
		"max": 324,
		"step": 2.58
	},
	"laptop": {
		"mu": 6.377356,
		"sigma": 0.7137223,
		"max": 2450,
		"step": 18.50
	},
	"sweater": {
		"mu": 3.321917,
		"sigma": 0.9034661,
		"max": 237,
		"step": 1.71
	},
	"watch": {
		"mu": 4.541763,
		"sigma": 1.3882370,
		"max": 2950,
		"step": 24.00
	}
}

var get_prior = cache(function(item) {
	var mu = parameters[item]["mu"];
	var sigma = parameters[item]["sigma"];
	return function() {
		var x = gaussian(mu, sigma);
		return(Math.exp(x));
	}
})

var get_theta_prior = cache(function(item) {
	var max = parameters[item]["max"];
	var step = parameters[item]["step"] / 2;
	return function() {
		return randomInteger(Math.round(max/step)) * step;
	};
})

var is_true = cache(function(utterance, value, theta) {
	if (utterance == "adj") {
		return value >= theta;
	} else if (utterance == "null") {
		return true;
	} else {
		console.log("err 55");
	}
})

var literal_listener = cache(function(utterance, theta, item) {
	return ParticleFilter(
		function() {
			var prior = get_prior(item);
			var value = prior();
			factor(is_true(utterance, value, theta) ? 0 : -Infinity)
			return value;
		}, n_particles
	)
})

var utterance_prior = cache(function(cost) {
	return Enumerate(
		function() {
			var utterances = ["adj", "null"];
			var costs = [cost, 0];
			var probabilities = map(function(c) {return Math.exp(- c);}, costs);
			return utterances[discrete(probabilities)];
		}
	);
})

var get_score = function(discreteERP, value) {
	var support = discreteERP.support();
	var lowerValue = Math.max.apply(null, filter(function(x) {
		return x <= value;
	}, support));
	var upperValue = Math.min.apply(null, filter(function(x) {
		return x >= value;
	}, support));
	var lowerProb = discreteERP.score([], lowerValue);
	var upperProb = discreteERP.score([], upperValue);
	return (lowerProb + upperProb) / 2;
}

var speaker = function(value, theta, item, cost, lambda) {
	return Enumerate(
		function() {
			var utterance = sample(utterance_prior(cost));
			var literal_interpretation = literal_listener(utterance, theta, item);
			var score = get_score(literal_interpretation, value);
			factor(score * lambda);
			return utterance;
		}
	)
}

var costs = [1, 3, 6, 9];
var lambdas = [1, 3, 6, 9];

var listener = function(utterance, item, cost, lambda) {
	return ParticleFilter(
		function() {
			var prior = get_prior(item);
			var theta_prior = get_theta_prior(item);
			var value = prior();
			var theta = theta_prior();
			var score = speaker(value, theta, item, cost, lambda).score([], utterance);
			factor(score);

			return [value, theta];
		}, n_particles
	)
}

var model = function() {
	var cost = uniformDraw(costs);
	var lambda = uniformDraw(lambdas);
	map(function(item) {
		var listenerERP = listener("adj", item, cost, lambda);
		function(sample) {
			var value = sample[0];
			var theta = sample[1];

			var inductives = map(function(eps) {
				return(value - eps >= theta);
			}, parameters[item].epsilons);
			var concretes = map(function(val) {
				return(val >= theta);
			}, parameters[item].values);

			var score = listenerERP.score([], sample);
			var probability = Math.exp(score);
			return [item, cost, lambda, value, theta, score, probability].concat(inductives).concat(concretes)
		}
	}, items);
}

map(function(cost) {
	map(function(lambda) {
		map(function(item) {
			console.log("running " + item + ": " + alternatives + "_cost" + cost + "_lambda" + lambda);
			var listenerERP = listener("adj", item, cost, lambda);
			console.log("finished running " + item + ": " + alternatives + "_cost" + cost + "_lambda" + lambda);
			var model_output = {
				"data" : map(function(pair) {
					var value = pair[0];
					var theta = pair[1];
					var score = listenerERP.score([], pair);
					var probability = Math.exp(score);
					return [item, cost, lambda, value, theta, score, probability];
				}, listenerERP.support())
			}
			simpleCSV.writeCSV(model_output, "model_output/" + item + "_" + alternatives + "_cost" + cost + "_lambda" + lambda + ".csv");
			return 1;
		}, items);
		return 1;
	}, lambdas);
	return 1;
}, costs)